install.packages("muschellij2/matlabr")
setRepositories()
install.packages('R.matlab', dependencies=TRUE, repos='https://github.com/HenrikBengtsson/R.matlab')
library(R.matlab)
isOpen.Matlab()
install.packages('matlabr', dependencies = TRUE)
system('matlab -nodisplay -r "a=2; b=1; display(a+b); exit"')
system("matlab -nodisplay -r 'stuff; to; do; in; matlab;'").
/Applications/MATLAB_R2017a.app/bin/matlab -- nodisplay
library(R.matlab)
Matlab$startServer()
matlab <- Matlab()
isOpen <- open(matlab)
installed.packages(R.matlab)
library(R.matlab)
Matlab$startServer()
matlab <- Matlab()
isOpen <- open(matlab)
v= [2,3]
if (!isOpen) throw("MATLAB server is not running: waited 30 seconds.")
# set a variable in R and send to MATLB
x <- 10
setVariable(matlab, x = x)
1
2
Received cmd: 3
Will read MAT file: "/tmp/RtmpK3nM1k/file1821f2a4d0339.mat"
1
evaluate(matlab, "x")
1
2
3
4
5
6
7
8
Received cmd: 1
"eval" string: "x"
x =
10
Sent byte: 0
1
2
# set a couple of variables in MATLAB
evaluate(matlab, "y=20; z=x+y")
1
2
3
4
5
6
7
8
Received cmd: 1
"eval" string: "y=20; z=x+y"
z =
30
Sent byte: 0
1
2
# pass a variable from MATLAB to R
z <- getVariable(matlab, "z")
1
2
3
4
5
Received cmd: 1
"eval" string: "variables = {'z'};"
Sent byte: 0
Received cmd: 2
save(tmpname, '-V6', 'z')
1
z
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
$z
[,1]
[1,]   30
attr(,"header")
attr(,"header")$description
[1] "MATLAB 5.0 MAT-file, Platform: GLNXA64, Created on: Fri Aug 15 09:57:56 2014                                        "
attr(,"header")$version
[1] "5"
attr(,"header")$endian
[1] "little"
answer=0
1
2
# close the MATLAB server
close(matlab)
pwd
install.packages("htmltools")
install.packages("htmltools")
install.packages("rmarkdown", type = "source")
c(1,100)
c(1)*100
rep(c(1),100)
x = c(2,3)
x(0)
x[1]=2
x
x[1]=3
x
x = [2,3,4]
x = c(2,3,4)
x(1:2)
x[1:2]
x
x[4,5]=c(3,4)
head(colors())
N
N=100
N/2
N/2+1
?type
income[(N/2+1):100]
income = rep(c(0),N);
income
length(income)
default
c(rep(c(2),3),rep(c(1),3))
matrix(c(2,3);c(2,2))
matrix(c(2,3),c(2,2))
X
x = c(2,3)
x''
x''
t(x)
t(x)*x
t(x).*x
t(x)%%x
x
x
x%%t(x)
t(x)
x
t(x)%*%x
X
x <- c(2,3)
y = x
y[2]=5
y
x
matrix(c(x,y),2,2)
beta
X = rUniform(n=10, a = 0, b = 1)
X = runif(n=10, a = 0, b = 1)
X = runif(n=10, 0, 1)
X
seq(0,1,2)
seq(0,1,4)
seq(0,1,length.out = 4)
seq(from =0,to=1,length.out = 4)
X
X[1]
X[3]
X
Let
x = c(2,1)
x
t(x)
x*t(x)
x%*%t(x)
M = matrix(0,ncol=2,nrow=5)
M
M
M[1,1]
M:,1]
M[:,1]
M[,1]
M
X
M
names(Smarket)
names(Smarket)
library(ISLR)
install.packages("ISLR")
cd /var/folders/xf/h_790f8x16dbd3y4dm7_b17c0000gn/T//RtmpGADPqt/downloaded_packages
cd "/var/folders/xf/h_790f8x16dbd3y4dm7_b17c0000gn/T//RtmpGADPqt/downloaded_packages"
/var/folders/xf/h_790f8x16dbd3y4dm7_b17c0000gn/T//RtmpGADPqt/downloaded_packages
install.packages("ISLR", type="binary")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages("ISLR")
names(Smarket)
library("ISLR")
names("Smarket")
data("Smarket")
names("Smarket")
summary("Smarket")
library(ISLR)
data(Smarket)
names(Smarket)
pairs(Smarket)
install.packages("MASS")
install.packages("class")
knitr::opts_chunk$set(echo = TRUE)
library(class)
train.X = cbind(Lag1,Lag2)[train]
install.packages(class)
library(class)
train.X = cbind(Lag1,Lag2)[train,]
M = c([2,3;3,2])
M = matrix()
M = matrix()
M = matrix( c(2,3,4,5),nrow = 2,ncol = 2,byrow = TRUE)
M
M = matrix( c(2,3,4,5),nrow = 2,ncol = 2)
M
scale(M)
scaled.M = scale(M)
scaled.M
scaled.M = scale(M[,])
scaled.M
M
scaled.M = scale(M[,1])
scaled.M
scaled.M[,1]
scaled.M[,]
scaled.M
scaled.M = scale(M)
scaled.M
1:3
set.seed(help)
help("set.seed")
install.packages("tinytex")
tinytex::install_tinytex()
devtools::install_github("rstudio/bookdown")
install.packages("bookdown")
install.packages("bookdown")
unlink('Downloads/bookdown-demo-master/index_cache', recursive = TRUE)
unlink('Downloads/bookdown-demo-master/index_cache', recursive = TRUE)
unlink('Downloads/bookdown-demo-master/index_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median(x_treatment)
median(x_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print(median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is',median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is'median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is',median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is')
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is')+print( median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
print('median of control groups is')+print(median_control)
x_treatment
x_treatment[1]
x_treatment[3]
indices<-c(2,4,5)
x_treatment(indices)
x_treatment[indices,]
x_treatment(indices,)
x_treatment(3)
x_treatment[3]
x_treatment[indices]
x_treatment[indices,]
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
sprinf("median of control groups is %s", median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
sprintf("median of control groups is %s", median_control)
library(boot)
x_treatment <- c(94, 197, 16, 38,99,141,23)
x_control <- c(52,104,146,10,51,30,40,27,46)
median_treat <- median(x_treatment)
median_control <- median(x_control)
sprintf("The median of control groups is %s", median_control)
sprintf("median of treatment groups is %s", median_treat)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap_treat <-boot(x_treatment,foo,R=50)
set.seed(1)
myBootstrap_treat <-boot(x_treatment,foo,R=50)
myBootstrap_control <-boot(x_control,foo,R=1000)
foo_mean <- function(data,indices){
dt<-data[indices]
c(
mean(dt)
)
}
myBootstrap_control_mean <-boot(x_control,foo_mean,R=10000)
myBootstrap_treat_mean <-boot(x_control,foo_mean,R=10000)
foo_mean <- function(data,indices){
dt<-data[indices]
c(
mean(dt)
)
}
myBootstrap_control_mean <-boot(x_control,foo_mean,R=10000)
myBootstrap_treat_mean <-boot(x_control,foo_mean,R=10000)
myBootstrap_control_mean
myBootstrap_treat_mean
foo_mean <- function(data,indices){
dt<-data[indices]
c(
mean(dt)
)
}
myBootstrap_control_mean <-boot(x_control,foo_mean,R=10000)
myBootstrap_treat_mean <-boot(x_treatment,foo_mean,R=10000)
myBootstrap_control_mean
myBootstrap_treat_mean
plot(myBootstrap_control,index=1)
library(splines)
d$splines <- ns(d$x, knots = (5,8,13))
d$splines <- ns(d$x, knots = c(5,8,13))
d <- ns(x, knots = c(5,8,13))
d <- ns(d$x, knots = c(5,8,13))
x = c(0:.1:10)
y = x.^2
y = c(x^2)
data.frame(x,y)
d = data.frame(x,y)
plot(d)
d$splines <- ns(d$x, knots = (2,4,9))
d$splines <- ns(d$x, knots = c(2,4,9))
model <- lm(y~splines, d)
lines(d$x,predict(model))
d$splines <- ns(d$x, knots = c(2,2.2,2.5))
model <- lm(y~splines, d)
lines(d$x,predict(model))
d$splines <- ns(d$x, knots = c(0,1.2,9))
lines(d$x,predict(model))
model <- lm(y~splines, d)
lines(d$x,predict(model))
library(splines2)
x = seq.int(0,1,0.1)
knots = c(0.1,0.3, 0.9)
bsMat = <- bs(x,knots,degree=3,intercept = True)
bsMat <- bs(x,knots,degree=3,intercept = True)
bsMat <- bs(x,knots,degree=3,intercept = TRUE)
bsMat <- bs(x,knots,degree=4,intercept = TRUE)
bsMat <- bs(x,knots,degree=3,intercept = TRUE)
plot(x,bsMat)
x
bsMat
bsMat <- bs(x,knots,degree=0,intercept = TRUE)
plot(x,bsMat)
matplot(x,bsMat)
matplot(x,bsMat, type="l")
bsMat
x = seq.int(0,3,0.1)
y = sin(x) - x
plot(x,y)
y = sin(x) - x + rnorm(length(x))
plot(x,y)
y = sin(x) - x + .2*rnorm(length(x))
plot(x,y)
quarters(x)
quantile(x,3)
quantile(x)
d <-quantile(x)
d
d[1]
d[1][1]
d[1,1
]
d[1,1]
d(1,0)
d
knots = c(.75,1.5, 2.25)
bsMat <-bs(x,knots, degree=0, intercept = TRUE)
bsMat <-bs(x,knots, degree=1, intercept = TRUE)
matplot(x,bsMat, )
matplot(x,bsMat,type = "l" )
bsMat <-bs(x,knots, degree=3, intercept = TRUE)
matplot(x,bsMat,type = "l" )
bsMat <-bs(x,knots, degree=7, intercept = TRUE)
matplot(x,bsMat,type = "l" )
matplot(x,bsMat,type = "l", x, y )
matplot(x,y, pch = 1)
matplot(x,bsMat,type = "l", x, y,pch = 1 )
matplot(x,bsMat,type = "l", x, y,pch = 1 )
matplot(x,bsMat,type = "l", x, y)
bsMat <-bs(x,knots, degree=7, intercept = TRUE)
matplot(x,bsMat,type = "l", x, y)
matplot(x,bsMat,type = "l")
matplot(x,y, pch = 1)
matplot(x,bsMat,type = "l")
lines(x,y, col="green")
curve(x,y, col="green")
plot(x,y, col="green")
matplot(x,bsMat,type = "l")
matplot(x,bsMat,type = "l")
points(x,y, col="green")
y = 3+sin(x) - x + .2*rnorm(length(x))
points(x,y, col="green")
y = .5+sin(x) - x + .2*rnorm(length(x))
points(x,y, col="green")
x
points(x,y, col="green")
points(x,y, col="green")
matplot(x,bsMat,type = "l")
points(x,y, col="green")
bsMat
bsMat[:,1]
bsMat[,1]
bsMat.x
bsMat.x <= matrix(as.numeric(bsMat), nr = nrow(bsMat))
b <= matrix(as.numeric(bsMat), nr = nrow(bsMat))
b <= attributes(bsMat)["dim"]
attributes(bsMat)<- <= attributes(bsMat)["dim"]
attributes(bsMat)<-  attributes(bsMat)["dim"]
bsMat
bsMat.t
bsMat.T
t(bsMat)
t(bsMat)*bsMat
t(bsMat)%*%bsMat
beta < = solve(t(bsMat)%*%bsMat)%*%t(bsMat)%*%y
beta <- solve(t(bsMat)%*%bsMat)%*%t(bsMat)%*%y
matplot(x,bsMat%*%beta)
matplot(x,bsMat%*%beta,type="l")
points(x,y)
pwd
ls
setwd("~/Dropbox/Matham-oil/R-markdown-website/Stochastic-Simulations")
installed.packages("rmarkdown",type="source")
install.packages("rmarkdown",type="source")
render_site()
#render your sweet site.
rmarkdown::render_site()
source('~/Dropbox/Matham-oil/R-markdown-website/Stochastic-Simulations/build_site.R')
#render your sweet site.
rmarkdown::render_site()
source('~/Dropbox/Matham-oil/R-markdown-website/Stochastic-Simulations/build_site.R')
source('~/Dropbox/Matham-oil/R-markdown-website/Stochastic-Simulations/build_site.R')
